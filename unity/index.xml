<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Unities on</title><link>https://quartz.jzhao.xyz/unity/</link><description>Recent content in Unities on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://quartz.jzhao.xyz/unity/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://quartz.jzhao.xyz/unity/pygame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://quartz.jzhao.xyz/unity/pygame/</guid><description>Pygame Projects Here you&amp;rsquo;ll find a link to all the python projects and the api references.
Pygame API We&amp;rsquo;re starting off with a simple python game that can be used to:
Mirror Phaser, Unity gameplay, assets, player [account] data (via Lootlocker API, Metamask, etc) Provide endpoints to the game&amp;rsquo;s API in different languages The game code can be found in the unity-lootlocker branch of the signal-k/dabpi repository.
Level class The game&amp;rsquo;s level information, structure and formula.</description></item><item><title>Login Functionality</title><link>https://quartz.jzhao.xyz/unity/login/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://quartz.jzhao.xyz/unity/login/</guid><description>Contents:
Login scene Meta Plan Database &amp;amp; API Login scene Meta Notion Page Public docs Unity-Demo#5 ; Unity-Demo#6 Plan Plan: let’s create a bit of a scene (after the player finishes the “orientation” or tutorial mission) where they log in to their wallet. Let’s also allow them to connect to an email address (as a backup).
Start by integrating with Metamask before moving it to Moralis, allowing users to input an email address, username, and then a “profile” (what they look like) .</description></item></channel></rss>